from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from PIL import Image, ImageDraw, ImageFont
from keyboard import *
from datetime import datetime


import json
import requests


hookURL = 'https://hook.eu1.make.com/v6cmtv4v3op8r8nkxemhyffi36fqtvj8'
hookURL2 = 'https://hook.eu1.make.com/vf3wrnp93ddef1sw51lhwb0mcx9pe0db'
real_names = {}


class FSMtest(StatesGroup):
    getRealName = State()
    privet = State()
    znakomstvo = State()

    interviewStart = State()
    interviewStep1 = State()
    interviewStep2 = State()
    interviewStep3 = State()
    interviewStep4 = State()
    interviewStep5 = State()
    interviewStep6 = State()
    interviewStep7 = State()
    interviewStep8 = State()
    interviewStep9 = State()
    interviewStepFinal = State()
    interviewStepFinal1 = State()
    interviewStepFinal2 = State()
    interviewStepFinal3 = State()


storage = MemoryStorage()
bot = Bot(token='6197036926:AAEx55Rg-9GJM0sqnCpVsYxIOQIDNLcNG_Y')
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message):
    now = datetime.now()
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")

    data = {
        'date': f'{dt_string}',
        'username': f'{message.from_user.username}',
    }
    r = requests.post(hookURL, data=json.dumps(data), headers={'Content-Type': 'application/json'})


    await message.answer('–ü—Ä–∏–≤–µ—Ç, –≤–µ—Å–µ–Ω–Ω—è—è üå∏\n\n–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å ‚Äì —Ç–æ–ª—å–∫–æ —Ç–≤–æ–π! –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –µ–≥–æ –µ—â–µ –≤–æ–ª—à–µ–±–Ω–µ–µ?',
                         reply_markup=davai_kb)
    await FSMtest.privet.set()


@dp.callback_query_handler(state=FSMtest.privet)
async def privet(callback: types.CallbackQuery):
    photo = open('pics/interview/start.jpg', 'rb')
    await bot.send_photo(callback.from_user.id, photo=photo,
                         caption='–í–ø–µ—Ä–µ–¥–∏ —Ç–µ–±—è –∂–¥—ë—Ç 9 –≤–æ–ø—Ä–æ—Å–æ–≤, –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä—ã–º –º—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –±–ª–∏–∂–µ üß°',
                         parse_mode='html', reply_markup=poehali_kb)
    await callback.answer()

    await FSMtest.znakomstvo.set()


@dp.callback_query_handler(state=FSMtest.znakomstvo)
async def znakomstvo(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, text='<b>–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–º–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π ‚ò∫Ô∏è</b>\n–í–ø–∏—à–∏ —Å–≤–æ–∏ '
                                                       '—Ä–µ–∞–ª—å–Ω—ã–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:', parse_mode='html')

    await callback.answer()
    await FSMtest.getRealName.set()


@dp.message_handler(state=FSMtest.getRealName)
async def getRealName(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['A'] = 0
        data['B'] = 0
        data['C'] = 0
        data['D'] = 0


    photo = open('pics/interview/question1.jpg', 'rb')

    await bot.send_photo(message.chat.id, photo=photo, caption='1. –ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ —Ç–≤–æ—ë –ª—é–±–∏–º–æ–µ?',
                         reply_markup=interview_kb1)

    real_names.update({f'{message.from_user.id}': f'{message.text}'})

    await FSMtest.interviewStep1.set()


@dp.callback_query_handler(state=FSMtest.interviewStep1)
async def testStep1(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    async with state.proxy() as data:

        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id= callback.message.message_id, reply_markup=None)

    photo = open('pics/interview/question2.jpg', 'rb')

    await bot.send_photo(callback.from_user.id, photo=photo, caption='2. –ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–¥—ã—Ö?',
                         reply_markup=interview_kb2)
    await FSMtest.interviewStep2.set()


@dp.callback_query_handler(state=FSMtest.interviewStep2)
async def testStep2(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    async with state.proxy() as data:

        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)
    photo = open('pics/interview/question3.jpg', 'rb')

    await bot.send_photo(callback.from_user.id, photo=photo, caption='3. –ß—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å, –∫–æ–≥–¥–∞ —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ?',
                         reply_markup=interview_kb3)
    await callback.answer()
    await FSMtest.interviewStep3.set()


@dp.callback_query_handler(state=FSMtest.interviewStep3)
async def testStep3(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    async with state.proxy() as data:

        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)
    photo = open('pics/interview/question4.jpg', 'rb')

    await bot.send_photo(callback.from_user.id, photo=photo, caption='4. –ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫?',
                         reply_markup=interview_kb4)
    await callback.answer()
    await FSMtest.interviewStep4.set()


@dp.callback_query_handler(state=FSMtest.interviewStep4)
async def testStep4(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    async with state.proxy() as data:

        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)

    photo = open('pics/interview/question5.jpg', 'rb')

    await bot.send_photo(callback.from_user.id, photo=photo, caption='5. –ù–∞ —á—Ç–æ —Ç—ã –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ –æ–±—Ä–∞—â–∞–µ—à—å –≤–Ω–∏–º–∞–Ω–∏–µ '
                                                                     '–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–µ —Å —á–µ–ª–æ–≤–µ–∫–æ–º?',
                         reply_markup=interview_kb5)
    await callback.answer()
    await FSMtest.interviewStep5.set()


@dp.callback_query_handler(state=FSMtest.interviewStep5)
async def testStep5(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    async with state.proxy() as data:

        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)

    photo = open('pics/interview/question6.jpg', 'rb')

    await bot.send_photo(callback.from_user.id, photo=photo, caption='6. –ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ø–∞—Ä—Ñ—é–º?',
                         reply_markup=interview_kb6)
    await callback.answer()
    await FSMtest.interviewStep6.set()


@dp.callback_query_handler(state=FSMtest.interviewStep6)
async def testStep6(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    async with state.proxy() as data:

        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)

    photo = open('pics/interview/question7.jpg', 'rb')

    await bot.send_photo(callback.from_user.id, photo=photo, caption='7. –ß—Ç–æ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å –∑–∞–ª–æ–≥–æ–º –∫—Ä—É—Ç–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏?',
                         reply_markup=interview_kb7)
    await callback.answer()
    await FSMtest.interviewStep7.set()


@dp.callback_query_handler(state=FSMtest.interviewStep7)
async def testStep7(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    async with state.proxy() as data:

        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)

    photo = open('pics/interview/question8.jpg', 'rb')

    await bot.send_photo(callback.from_user.id, photo=photo, caption='8. –ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –º–æ–¥–Ω—ã–º —Ç—Ä–µ–Ω–¥–∞–º?',
                         reply_markup=interview_kb8)
    await callback.answer()
    await FSMtest.interviewStep8.set()


@dp.callback_query_handler(state=FSMtest.interviewStep8)
async def testStep8(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    async with state.proxy() as data:

        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)

    photo = open('pics/interview/question9.jpg', 'rb')

    await bot.send_photo(callback.from_user.id, photo=photo, caption='9. –¢–≤–æ–∏ –ø–ª–∞–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ:',
                         reply_markup=interview_kb9)
    await callback.answer()
    await FSMtest.interviewStep9.set()


@dp.callback_query_handler(state=FSMtest.interviewStep9)
async def testStep9(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    async with state.proxy() as data:

        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

        sum = {
            'A': f'{data["A"]}',
            'B': f'{data["B"]}',
            'C': f'{data["C"]}',
            'D': f'{data["D"]}',
        }

        answerTotal = max(sum, key=sum.get)
        print(answerTotal)

    await callback.answer()

    if answerTotal == 'A':
        congratsText = '–ï—Å–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç—å –æ –∂–µ–Ω—â–∏–Ω–∞—Ö-–æ–±–æ–ª—å—Å—Ç–∏—Ç–µ–ª—å–Ω–∏—Ü–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±–æ—è—Ç—Å—è –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è, ' \
                       '—Ç–æ —ç—Ç–æ –æ—á–µ–≤–∏–¥–Ω–æ —Ç–≤–æ–π —Ç–∏–ø. –¢—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±–æ—è–ª–∞—Å—å –≤—ã–¥–µ–ª—è—Ç—å—Å—è –∏–∑ —Ç–æ–ª–ø—ã –∏ —Å–ø–æ–∫–æ–π–Ω–æ –Ω–æ—Å–∏—à—å —Å–ª–æ–∂–Ω—ã–µ ' \
                       '–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ä–∏—Å–∫–Ω—É–ª–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ–±—ã—á–Ω—ã—Ö –ª—é–¥–µ–π. –¢–≤–æ–µ–π —Å—Ç—Ä–∞—Å—Ç–Ω–æ–π ' \
                       '–Ω–∞—Ç—É—Ä–µ –Ω—É–∂–Ω—ã —è—Ä–∫–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –¥—É—Ö–∏, –±—É–¥–æ—Ä–∞–∂–∞—â–∏–µ —Å–æ–∑–Ω–∞–Ω–∏–µ. –ü–æ—ç—Ç–æ–º—É —Ç–µ–±–µ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç ' \
                       '<b>–≤–æ—Å—Ç–æ—á–Ω—ã–π</b> –ø–∞—Ä—Ñ—é–º. \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –í–æ—Å—Ç–æ—á–Ω—ã–µ - Shalimar, Guerlain, MUGLER les exceptions ' \
                       'oriental extreme, ETRO ambra'

    elif answerTotal == 'B':
        congratsText = '–¢—ã –¥–µ—Ä–∑–∫–∞—è, —è—Ä–∫–∞—è –∏ –∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω–∞—è –Ω–∞—Ç—É—Ä–∞. –ù–∞—Å—Ç–æ—è—â–∞—è –¥—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–º–µ–ª–æ –∏–¥—ë—Ç ' \
                       '–Ω–∞–≤—Å—Ç—Ä–µ—á—É –Ω–æ–≤—ã–º –∏–¥–µ—è–º –∏ —Å–≤–µ–∂–∏–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º. –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å —Ç–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–º–æ–≥—É—Ç —Å–æ—á–Ω—ã–µ, ' \
                       '–≤ –º–µ—Ä—É —Å–ª–∞–¥–∫–∏–µ, –∏—Å–∫—Ä—è—â–∏–µ—Å—è <b>—Ñ—Ä—É–∫—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏</b> ‚Äì –≤–µ–¥—å —Å –Ω–∏–º–∏ —Ç—ã –∏ —Å–∞–º–∞ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å ' \
                       '—Å–µ–±—è –ª–∞–∫–æ–º—ã–º –∫—É—Å–æ—á–∫–æ–º. \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: Clinique Happy, Burberry My Burberry Blush, ' \
                       'Vilhelm Parfumerie Mango Skin, Annick Goutal Petite Cherie'

    elif answerTotal == 'C':
        congratsText = '–¢—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–≤–µ—Ä–µ–Ω–∞ –≤ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö —Å–∏–ª–∞—Ö. –¢–≤–æ—è –∞–∫—Ç–∏–≤–Ω–∞—è –∂–∏–∑–Ω–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ —Ç–µ—Ä–ø–∏—Ç —Å—É–µ—Ç—ã, ' \
                       '–∞ –≤—Å–µ —Ç–≤–æ–∏ —à–∞–≥–∏ –≤—Å–µ–≥–¥–∞ –ª–æ–≥–∏—á–Ω—ã –∏ —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–¥—É–º–∞–Ω—ã. –ü—Ä–∏ —ç—Ç–æ–º —Ç—ã –Ω–µ –±–æ–∏—à—å—Å—è —É—Å–ª–æ–≤–Ω–æ—Å—Ç–µ–π –∏ ' \
                       '–ª—é–±–∏—à—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ —Å—Ç–∏–ª–µ–º. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–º–µ–ª–æ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ ' \
                       '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <b>–¥—Ä–µ–≤–µ—Å–Ω—ã–µ –Ω–æ—Ç–∫–∏</b> –≤ —Å—Ç–∏–ª–µ —É–Ω–∏—Å–µ–∫—Å.\n\n –ù–∞–ø—Ä–∏–º–µ—Ä: Tiffany & Love For Her, ' \
                       'ESCENTRIC MOLECULES molecule 03, Woodissime, Mugler.'

    else:
        congratsText = '–ù–µ—Ç –±–æ–ª–µ–µ –Ω–µ–∂–Ω–æ–π, –º–µ—á—Ç–∞—Ç–µ–ª—å–Ω–æ–π –∏ —É—Ç–æ–Ω—á—ë–Ω–Ω–æ–π –Ω–∞—Ç—É—Ä—ã, —á–µ–º —Ç—ã. –ö–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ä–æ–º–∞–Ω—Ç–∏–∫, —Ç—ã —É–º–µ–µ—à—å ' \
                       '—Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–π —É—é—Ç –∏ –≤–µ—Ä–∏—à—å –≤ –Ω–∞—Å—Ç–æ—è—â—É—é –ª—é–±–æ–≤—å. –¢–≤–æ—é –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–æ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç ' \
                       '<b>—Ü–≤–µ—Ç–æ—á–Ω—ã–µ –Ω–æ—Ç–∫–∏</b>. –ü—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ –Ω–∏–º: —Å—Ä–µ–¥–∏ –≤–µ–ª–∏–∫–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ñ–ª–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö ' \
                       '–∫–æ–º–ø–æ–∑–∏—Ü–∏–π –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏ –Ω–µ–∂–Ω—ã–µ, –∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ, –∏ —á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: DIOR ' \
                       'Forever And Ever, GIORGIO ARMANI PRIVE PIVOINE SUZHOU, Innocente Fragilite, Chabaud'

    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)

    image = Image.open(f"pics/results/{answerTotal}.jpg")

    font = ImageFont.truetype("font/BeelineSans-Regular.ttf", 40)
    boldFont = ImageFont.truetype("font/BeelineSans-Bold.ttf", 40)
    drawer = ImageDraw.Draw(image)

    name = real_names[f'{callback.from_user.id}']

    drawer.text((1388 // 2, 400), f"{name.upper()},", anchor='mm', font=boldFont, fill='white')
    drawer.text((1388 // 2, 445), f"–æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç–∏ –∞—Ä–æ–º–∞—Ç—ã", anchor='mm', font=font, fill='white')

    image.save(f'peoplePics/new_{callback.from_user.id}_img.png')

    photo = open(f'peoplePics/new_{callback.from_user.id}_img.png', 'rb')

    await bot.send_photo(callback.from_user.id, photo=photo, reply_markup=next_kb, caption=congratsText,
                         parse_mode='html')
    await FSMtest.interviewStepFinal.set()


@dp.callback_query_handler(state=FSMtest.interviewStepFinal)
async def finish1(callback: types.CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id, text='–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ –±—ã–ª–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ —Å—Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ–≥–æ! –¢—ã '
                                                               '–ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è üí´', reply_markup=next_kb)

    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)

    await FSMtest.interviewStepFinal1.set()
    await callback.answer()


@dp.callback_query_handler(state=FSMtest.interviewStepFinal1)
async def finish2(callback: types.CallbackQuery):
    now = datetime.now()
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")

    data = {
        'date': f'{dt_string}',
        'username': f'{callback.from_user.username}',
    }
    r = requests.post(hookURL2, data=json.dumps(data), headers={'Content-Type': 'application/json'})

    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)

    photo = open(f'pics/interview/final.jpg', 'rb')

    await bot.send_photo(callback.from_user.id, photo=photo,
                         caption='–ù–∞ –ø–∞–º—è—Ç—å –æ–± —ç—Ç–æ–º –¥–Ω–µ –ª–æ–≤–∏ —Å–∞–º—ã–π –≤–µ—Å–µ–Ω–Ω–∏–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ üå∑', reply_markup=sticker_kb)

    await FSMtest.interviewStepFinal2.set()
    await callback.answer()


@dp.callback_query_handler(state=FSMtest.interviewStepFinal2)
async def again(callback: types.CallbackQuery):
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)
    await bot.send_message(chat_id=callback.from_user.id, text='–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ?', reply_markup=fork_kb)
    await callback.answer()
    await FSMtest.interviewStepFinal3.set()


@dp.callback_query_handler(state=FSMtest.interviewStepFinal3)
async def fork(callback: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                        reply_markup=None)
    if callback.data == 'false':
        await bot.send_message(chat_id=callback.from_user.id, text='–û–∫–µ–π) –•–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–∏ –≤—Ä–µ–º—è!')
        await callback.answer()
        await state.finish()
    else:
        photo = open('pics/interview/question1.jpg', 'rb')

        await bot.send_photo(callback.from_user.id, photo=photo, caption='1. –ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ —Ç–≤–æ—ë –ª—é–±–∏–º–æ–µ?',
                             reply_markup=interview_kb1)
        await callback.answer()
        await FSMtest.interviewStep1.set()


executor.start_polling(dp, skip_updates=True)
